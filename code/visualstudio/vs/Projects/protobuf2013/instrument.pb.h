// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instrument.proto

#ifndef PROTOBUF_instrument_2eproto__INCLUDED
#define PROTOBUF_instrument_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace depth5md {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_instrument_2eproto();
void protobuf_AssignDesc_instrument_2eproto();
void protobuf_ShutdownFile_instrument_2eproto();

class InstrumentNode;
class InstrumentSet;

// ===================================================================

class InstrumentNode : public ::google::protobuf::Message {
 public:
  InstrumentNode();
  virtual ~InstrumentNode();

  InstrumentNode(const InstrumentNode& from);

  inline InstrumentNode& operator=(const InstrumentNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentNode& default_instance();

  void Swap(InstrumentNode* other);

  // implements Message ----------------------------------------------

  InstrumentNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstrumentNode& from);
  void MergeFrom(const InstrumentNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated string instrument = 2;
  inline int instrument_size() const;
  inline void clear_instrument();
  static const int kInstrumentFieldNumber = 2;
  inline const ::std::string& instrument(int index) const;
  inline ::std::string* mutable_instrument(int index);
  inline void set_instrument(int index, const ::std::string& value);
  inline void set_instrument(int index, const char* value);
  inline void set_instrument(int index, const char* value, size_t size);
  inline ::std::string* add_instrument();
  inline void add_instrument(const ::std::string& value);
  inline void add_instrument(const char* value);
  inline void add_instrument(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& instrument() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_instrument();

  // @@protoc_insertion_point(class_scope:depth5md.InstrumentNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> instrument_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_instrument_2eproto();
  friend void protobuf_AssignDesc_instrument_2eproto();
  friend void protobuf_ShutdownFile_instrument_2eproto();

  void InitAsDefaultInstance();
  static InstrumentNode* default_instance_;
};
// -------------------------------------------------------------------

class InstrumentSet : public ::google::protobuf::Message {
 public:
  InstrumentSet();
  virtual ~InstrumentSet();

  InstrumentSet(const InstrumentSet& from);

  inline InstrumentSet& operator=(const InstrumentSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentSet& default_instance();

  void Swap(InstrumentSet* other);

  // implements Message ----------------------------------------------

  InstrumentSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstrumentSet& from);
  void MergeFrom(const InstrumentSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .depth5md.InstrumentNode node = 1;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::depth5md::InstrumentNode& node(int index) const;
  inline ::depth5md::InstrumentNode* mutable_node(int index);
  inline ::depth5md::InstrumentNode* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::depth5md::InstrumentNode >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::depth5md::InstrumentNode >*
      mutable_node();

  // @@protoc_insertion_point(class_scope:depth5md.InstrumentSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::depth5md::InstrumentNode > node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_instrument_2eproto();
  friend void protobuf_AssignDesc_instrument_2eproto();
  friend void protobuf_ShutdownFile_instrument_2eproto();

  void InitAsDefaultInstance();
  static InstrumentSet* default_instance_;
};
// ===================================================================


// ===================================================================

// InstrumentNode

// required int32 id = 1;
inline bool InstrumentNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstrumentNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstrumentNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstrumentNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 InstrumentNode::id() const {
  return id_;
}
inline void InstrumentNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated string instrument = 2;
inline int InstrumentNode::instrument_size() const {
  return instrument_.size();
}
inline void InstrumentNode::clear_instrument() {
  instrument_.Clear();
}
inline const ::std::string& InstrumentNode::instrument(int index) const {
  return instrument_.Get(index);
}
inline ::std::string* InstrumentNode::mutable_instrument(int index) {
  return instrument_.Mutable(index);
}
inline void InstrumentNode::set_instrument(int index, const ::std::string& value) {
  instrument_.Mutable(index)->assign(value);
}
inline void InstrumentNode::set_instrument(int index, const char* value) {
  instrument_.Mutable(index)->assign(value);
}
inline void InstrumentNode::set_instrument(int index, const char* value, size_t size) {
  instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstrumentNode::add_instrument() {
  return instrument_.Add();
}
inline void InstrumentNode::add_instrument(const ::std::string& value) {
  instrument_.Add()->assign(value);
}
inline void InstrumentNode::add_instrument(const char* value) {
  instrument_.Add()->assign(value);
}
inline void InstrumentNode::add_instrument(const char* value, size_t size) {
  instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InstrumentNode::instrument() const {
  return instrument_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InstrumentNode::mutable_instrument() {
  return &instrument_;
}

// -------------------------------------------------------------------

// InstrumentSet

// repeated .depth5md.InstrumentNode node = 1;
inline int InstrumentSet::node_size() const {
  return node_.size();
}
inline void InstrumentSet::clear_node() {
  node_.Clear();
}
inline const ::depth5md::InstrumentNode& InstrumentSet::node(int index) const {
  return node_.Get(index);
}
inline ::depth5md::InstrumentNode* InstrumentSet::mutable_node(int index) {
  return node_.Mutable(index);
}
inline ::depth5md::InstrumentNode* InstrumentSet::add_node() {
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::depth5md::InstrumentNode >&
InstrumentSet::node() const {
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::depth5md::InstrumentNode >*
InstrumentSet::mutable_node() {
  return &node_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace depth5md

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_instrument_2eproto__INCLUDED
