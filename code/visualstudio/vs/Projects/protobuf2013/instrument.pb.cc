// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instrument.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "instrument.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace depth5md {

namespace {

const ::google::protobuf::Descriptor* InstrumentNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_instrument_2eproto() {
  protobuf_AddDesc_instrument_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "instrument.proto");
  GOOGLE_CHECK(file != NULL);
  InstrumentNode_descriptor_ = file->message_type(0);
  static const int InstrumentNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentNode, instrument_),
  };
  InstrumentNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentNode_descriptor_,
      InstrumentNode::default_instance_,
      InstrumentNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentNode));
  InstrumentSet_descriptor_ = file->message_type(1);
  static const int InstrumentSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentSet, node_),
  };
  InstrumentSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentSet_descriptor_,
      InstrumentSet::default_instance_,
      InstrumentSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_instrument_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentNode_descriptor_, &InstrumentNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentSet_descriptor_, &InstrumentSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_instrument_2eproto() {
  delete InstrumentNode::default_instance_;
  delete InstrumentNode_reflection_;
  delete InstrumentSet::default_instance_;
  delete InstrumentSet_reflection_;
}

void protobuf_AddDesc_instrument_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020instrument.proto\022\010depth5md\"0\n\016Instrume"
    "ntNode\022\n\n\002id\030\001 \002(\005\022\022\n\ninstrument\030\002 \003(\t\"7"
    "\n\rInstrumentSet\022&\n\004node\030\001 \003(\0132\030.depth5md"
    ".InstrumentNode", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "instrument.proto", &protobuf_RegisterTypes);
  InstrumentNode::default_instance_ = new InstrumentNode();
  InstrumentSet::default_instance_ = new InstrumentSet();
  InstrumentNode::default_instance_->InitAsDefaultInstance();
  InstrumentSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_instrument_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_instrument_2eproto {
  StaticDescriptorInitializer_instrument_2eproto() {
    protobuf_AddDesc_instrument_2eproto();
  }
} static_descriptor_initializer_instrument_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InstrumentNode::kIdFieldNumber;
const int InstrumentNode::kInstrumentFieldNumber;
#endif  // !_MSC_VER

InstrumentNode::InstrumentNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentNode::InitAsDefaultInstance() {
}

InstrumentNode::InstrumentNode(const InstrumentNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentNode::~InstrumentNode() {
  SharedDtor();
}

void InstrumentNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrumentNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentNode_descriptor_;
}

const InstrumentNode& InstrumentNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instrument_2eproto();
  return *default_instance_;
}

InstrumentNode* InstrumentNode::default_instance_ = NULL;

InstrumentNode* InstrumentNode::New() const {
  return new InstrumentNode;
}

void InstrumentNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  instrument_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instrument;
        break;
      }

      // repeated string instrument = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instrument()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument(this->instrument_size() - 1).data(),
            this->instrument(this->instrument_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instrument;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated string instrument = 2;
  for (int i = 0; i < this->instrument_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->instrument(i).data(), this->instrument(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrument(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated string instrument = 2;
  for (int i = 0; i < this->instrument_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument(i).data(), this->instrument(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->instrument(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated string instrument = 2;
  total_size += 1 * this->instrument_size();
  for (int i = 0; i < this->instrument_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instrument(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentNode::MergeFrom(const InstrumentNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrument_.MergeFrom(from.instrument_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentNode::CopyFrom(const InstrumentNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstrumentNode::Swap(InstrumentNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    instrument_.Swap(&other->instrument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentNode_descriptor_;
  metadata.reflection = InstrumentNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentSet::kNodeFieldNumber;
#endif  // !_MSC_VER

InstrumentSet::InstrumentSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentSet::InitAsDefaultInstance() {
}

InstrumentSet::InstrumentSet(const InstrumentSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentSet::~InstrumentSet() {
  SharedDtor();
}

void InstrumentSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrumentSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentSet_descriptor_;
}

const InstrumentSet& InstrumentSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instrument_2eproto();
  return *default_instance_;
}

InstrumentSet* InstrumentSet::default_instance_ = NULL;

InstrumentSet* InstrumentSet::New() const {
  return new InstrumentSet;
}

void InstrumentSet::Clear() {
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .depth5md.InstrumentNode node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .depth5md.InstrumentNode node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .depth5md.InstrumentNode node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentSet::ByteSize() const {
  int total_size = 0;

  // repeated .depth5md.InstrumentNode node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentSet::MergeFrom(const InstrumentSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentSet::CopyFrom(const InstrumentSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentSet::IsInitialized() const {

  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  return true;
}

void InstrumentSet::Swap(InstrumentSet* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentSet_descriptor_;
  metadata.reflection = InstrumentSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace depth5md

// @@protoc_insertion_point(global_scope)
