--------------------------
jau -- 剑网2海外版制作工具
----------------------------------------------------------------------------------------------------------------------------

功能描述:
---------
jau的制作目的是为了使海外版的制作（翻译游戏中一切需要翻译的地方）更加的方便快捷，主要由以下五个功能：
1, 抽取一个目录下所有文件中需要翻译的中文字符串，并把结果插入字典数据库中。
2, 翻译一个目录下所有文件中需要翻译的中文字符串，并把翻译后的结果写入另外一个目录中的同等目录下。
3, 更新翻译，现在支持的更新字典的方式有三种(同时可以通过选项指定是否以兼容老的工具的方式更新字典):
    a) 通过在命令行指定中文字符串和对应翻译的方式更新单条记录
    b) 通过在命令行指定中文文件和对应的翻译文件的方式更新一个文件内的所有记录
    c) 如果拿到的翻译都是由小文件组成的,使用前面两种方式都比较麻烦,那么可以按照中文文件名对应翻译的英文文件名的顺序
       将所有的小文件文件名写入到一个文件内,在命令行指定这个文件,系统将会自动更新这个文件里面所有文件里面的记录
4, 查询删除记录。可以查询一条中文记录对应的翻译，并可以指定从字典中删除它
5, 遍历字典数据库中的每一条翻译记录，并执行指定的操作，现在支持的操作有:
    a) 导出所有已翻译的记录，
    b) 检查程序中用到的字符串的参数列表是否正确 
    c) 检查使用的一些有特殊含义的符号在翻译后是否有丢失，比如{} []在技能的描述中用来解析数字使用
    d) 将字典中所有翻译中的中文简体的标点符号转换为对应版本的标点符号
----------------------------------------------------------------------------------------------------------------------------

命令详解:
---------
【注意事项】:
使用之前,请先配置下语言类型,比如我们现在分为繁体版,英文版,越南版.另外还有一个特别临时版,专门为那些只想抽取下不需要把
抽取的内容入数据库时的操作准备的.db版本的jau请配置db_bdb.conf,mysql版本的jau请配置db_sql.conf.默认的0代表临时操作,这样
如果你忘了修改语言设定,不会意外地将操作的结果写入你的数据库.

【命令格式】:
“jau 命令字符串 参数和选项” 注意, 命令字符串的位置必须紧跟在jau之后,参数和选项的位置没有先后顺序,即如果有多个参数或选项,
顺序可以随意,下面的介绍中{}括起来表示这个参数是必须的,[]括起来的内容为可选项. 用 | 分割开来的参数,表示只需要其中的一种参数即可.

1, 抽取需要翻译的中文字符串
命令: jau getstring {-s=sdir}
参数: sdir为你要抽取中文字符串的配置文件和脚本所在的根路径

例子: jau getstring -s=/home/shishuaiwei/work/trans_work/chinese_setting
结果: 将会在当前目录(程序运行的目录)下生成一个str_chinese.txt,里面存放抽取chinese_setting目录下所有文件的过程
     中发现的所有字典中没有的需要翻译的中文字符串.str_filename.txt和str_path.txt分别为这个目录下识别出来的所有
     文件名和路径,有时候需要检查下是否有识别错误.另外,会在当前目录下生成一个dictionary_语言名.db,比如英文版的为
     dictionary_eng.db的数据库文件,里面存放了所有的记录,包括已翻译以及未翻译的

2, 翻译配置文件和脚本
命令: jau translate {-s=sdir -t=tdir}
参数: sdir为需要翻译的中文配置文件和脚本所在的根目录
     tdir为翻译后的中文配置文件和脚本所存放的目录,注意,这个根目录需要事先建好,程序不会自动为你创建.
例子: jau translate -s=/home/shishuaiwei/work/trans_work/chinese_setting 
     -t=/home/shishuaiwei/work/trans_work/trans_setting
结果: 会抽取sdir指定的目录下(包括子目录)的所有文件中的中文字符串并去字典数据库中查询它对应的翻译然后将翻译插回原文件,
     并将翻译后的文件写入tdir目录下的同等的目录结构
 
3, 更新字典
命令: jau update [-o] {-f=file | -c=cfile -t=tfile | -C=cstr -T=tstr}
选项: -o,三种更新类型都可以指定,如果指定则以兼容老的工具抽取的字符串的方式将中文和翻译更新入现在的字典中
参数: file指定当你使用功能描述中介绍的第三种方式更新字典时那个文件的文件名
参数: cfile指定当你使用功能描述中介绍的第二种方式更新字典时中文文件的文件名
参数: tfile指定当你使用功能描述中介绍的第二种方式更新字典时对应的翻译文件的文件名
参数: cstr指定当你使用功能描述中介绍的第二种方式更新字典时的中文字符串
参数: tstr指定当你使用功能描述中介绍的第二种方式更新字典时对应的翻译

例子: jau update {-c=ch.txt -t=trans.txt}
结果: 循环按行读取一条ch.txt的记录,然后再读取trans中对应的翻译,然后将其更新到字典,直到文件结束

例子: jau update -C=测试 -T=test
结果: 更新字典中的"测试"的翻译,如果没有这条记录则将其插入字典中

例子: jau update -f=a.txt
结果: 假设 a.txt中的内容为
c:\ch1.txt
c:\trans1.txt
c:\ch2.txt
c:\trans2.txt
...
那么系统将会自动先读取出c:\ch1.txt c:\trans1.txt这两个文件的文件名,并按照功能描述中的第二种更新方式,将这两个文件
中的所有记录更新到字典中.接着读取出c:\ch2.txt c:\trans2.txt这两个文件的文件名,按照同样的方法更新,依次往下进行

4, 查询及删除记录
命令: jau query [-d] {-C=cStr}
选项: -d 指定是否在查询之后直接从字典中删除掉这条记录
参数: cStr指定待查询的中文字符串
例子: jau query -C=剑侠情缘网络版2
结果: 输出剑侠情缘网络版2对应语言的翻译

例子: jau query -d -C=不需要翻译
结果: 将"不需要翻译"这条记录从字典中删除掉

5, 遍历数据库
命令: jau traverse {-d=operatestr -c=cfile -t=tfile}
参数: operatestr为操作字符串,现在支持的操作有:check_vlist check_brackets export convert
     cfile指定遍历后的结果中中文字符串需要写入的文件
     tfile指定遍历后的结果中翻译字符串需要写入的文件
例子: jau traverse -d=export -c=ch.txt -t=trans.txt
结果: 将当前数据库中所有已翻译的记录的中文字符串和翻译字符串分别写入ch.txt和trans.txt.注意: 只会导出所有需要让对方
翻译的内容,一些自动翻译的(比如只有中文标点符号的字符串系统会自动翻译并插入数据库)或者不需要翻译的(比如音效百灵之类)
都不会导出.所以请勿使用导出后的内容生成新的库.

例子: jau traverse -d=check_vlist -c=ch_err.txt -t=trans_err.txt
结果: 检查字典中所有已翻译的记录,并对中文和对应的翻译进行比较%d %s /1 /2..(/数字)这些关键部分是否一致,
     如果发现不一致的,中文部分写入ch_err.txt,翻译部分写入trans_err.txt

例子: jau traverse -d=check_brackets -c=ch_err.txt -t=tran_err.txt
结果: 检查字典中所有已翻译的记录,并对中文和对应的翻译进行比较{} []这些关键部分是否一致,
     如果发现不一致的,中文部分写入ch_err.txt,翻译部分写入trans_err.txt

例子: jau traverse -d=convert -c=ch.txt -t=trans.txt
结果: 遍历字典中所有已翻译的记录,替换每一条记录的翻译中的中文简体的标点符号转换为对应版本的标点符号,标点符号的转换表
     参看sign_table.conf

----------------------------------------------------------------------------------------------------------------------------

版本说明:
---------
jau同时支持linux和window平台,另外在开发的前期使用的是mysql 5作为数据库开发的,后来发现对于这种小型的应用程序对数剧库
的需求来说,使用berkeley db这种嵌入式的数据库效率更高,并且使用起来更方便,不需要安装配置mysql,并且会生成一个单独的数
据库文件便于备份,于是又改用berkeley db对数据库部分进行了重写,同时保留了先前的mysql版本,不过后期的开发都是基于
berkeley db的版本进行开发的,有些功能可能没有同步到mysql的版本中去.

----------------------------------------------------------------------------------------------------------------------------

配置说明:
---------
db_mysql.conf		使用mysql作为数据库的jau版本使用的数据库配置文件,里面需要配置怎么连接mysql服务器
db_bdb.conf		使用bdb作为数据库的jau版本的数据库配置,里面需要配置语言类型,程序根据这个语言类型来自动
			判断需要生成和读取的数据库文件的文件名
ignore_file.conf	抽取和翻译的过程中需要过滤的文件的配置,功能包括哪些文件不需要抽取以及哪些文件的哪些列不需要抽取
			详细配置方法见文件内容
ignore_dir.conf		抽取和翻译的过程中需要过滤的文件夹的配置,指定那些不需要翻译的文件夹以便节省时间减少错误.
			详细配置方法见文件内容.
sign_table.conf		标点符号转换表,将翻译中含有的中文标点符号翻译成对应语言的标点符号,文件共有三列,第一列为
			中文简体的一些标点符号,第二列为对应的中文繁体的big5码的标点符号,第三列为对应的ascii的标点符号

----------------------------------------------------------------------------------------------------------------------------

编译说明:
---------
windows版本的编译直接使用build_windows目录下的jau.sln(该文件为vs2003的工程),编译后会在jau目录下面创建work_db
和work_sql两个目录,并分别把两个版本运行jau需要的程序文件和配置文件拷贝到对应的目录下.
linux版本的编译使用build_linux目录下的makefile,命令行下将当前目录切换到到该目录,运行make命令即可,编译同样会在
jau目录下面创建work_db和work_sql两个目录,并分别把两个版本运行jau需要的程序文件和配置文件拷贝到对应的目录下.
----------------------------------------------------------------------------------------------------------------------------

注意事项:
---------
1，在linux下编译jau最好使用最新的berkeley和mysql的库文件试一下，版本里面自带的库文件我只在ubuntu下编译通过，在debian下
链接有问题。
2，在linux下运行最好将linux的locale设为gbk编码，一般中文linux系统默认的都是zh_utf8编码的，而我们cvs库里面的文件名和文
件夹的编码一般是gbk，这样当我们从cvs里面把配置文件库取下来后看到的都是乱码
----------------------------------------------------------------------------------------------------------------------------
